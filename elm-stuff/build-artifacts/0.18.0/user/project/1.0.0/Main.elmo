var _user$project$Main$Flags = F5(
	function (a, b, c, d, e) {
		return {password: a, audioLevel: b, username: c, email: d, newUser: e};
	});
var _user$project$Main$SetNewTime = function (a) {
	return {ctor: 'SetNewTime', _0: a};
};
var _user$project$Main$SetCurrentTime = function (a) {
	return {ctor: 'SetCurrentTime', _0: a};
};
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$subscriptions = function (gm) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: gm.isPlaying ? A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$SetCurrentTime) : _elm_lang$core$Platform_Sub$none,
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material$subscriptions, _user$project$Main$Mdl, gm),
				_1: {
					ctor: '::',
					_0: _user$project$Util_Port$sendProgressBarWidth(_user$project$Main$SetNewTime),
					_1: {
						ctor: '::',
						_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$LoadedNextSongs = function (a) {
	return {ctor: 'LoadedNextSongs', _0: a};
};
var _user$project$Main$SongEnded = function (a) {
	return {ctor: 'SongEnded', _0: a};
};
var _user$project$Main$onEnded = function (stationId) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'ended',
		_elm_lang$core$Json_Decode$succeed(
			_user$project$Main$SongEnded(stationId)));
};
var _user$project$Main$UiMsg = function (a) {
	return {ctor: 'UiMsg', _0: a};
};
var _user$project$Main$viewPlayer = F2(
	function (gm, content) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'flex-direction', _1: 'column'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$map,
					_user$project$Main$UiMsg,
					_user$project$View_Ui$viewTopBar(gm)),
				_1: {
					ctor: '::',
					_0: content,
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$map,
							_user$project$Main$UiMsg,
							_user$project$View_Ui$viewControls(gm)),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Main$SelectorMsg = function (a) {
	return {ctor: 'SelectorMsg', _0: a};
};
var _user$project$Main$LoginMsg = function (a) {
	return {ctor: 'LoginMsg', _0: a};
};
var _user$project$Main$init = function (flags) {
	var email = function () {
		var _p0 = flags.email;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return '';
		}
	}();
	var _p1 = flags.password;
	if (_p1.ctor === 'Just') {
		var _p3 = _p1._0;
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			{
				page: _user$project$Util_Types$LoginWindow,
				authToken: '',
				deletingStationPopup: false,
				updatingStationPopup: false,
				username: flags.username,
				newUser: _elm_lang$core$Native_Utils.eq(
					flags.newUser,
					_elm_lang$core$Maybe$Just('false')) ? _elm_lang$core$Maybe$Just(false) : _elm_lang$core$Maybe$Just(true),
				mdl: _debois$elm_mdl$Material$model,
				keyPress: 0,
				seek: 0,
				isPlaying: false,
				audioLevel: flags.audioLevel,
				audioHover: false,
				currentTime: 0,
				songQueue: {ctor: '[]'},
				currentStation: _elm_lang$core$Maybe$Nothing,
				stations: {ctor: '[]'},
				previousSongs: {ctor: '[]'},
				loginModel: {email: email, password: _p3, remember: false, failed: false},
				selectorModel: {
					state: _user$project$Util_Types$Selecting,
					previousSongs: {ctor: '[]'},
					searchResults: _elm_lang$core$Dict$empty,
					searchInput: ''
				},
				uiModel: {}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$http$Http$send,
					function (_p2) {
						return _user$project$Main$LoginMsg(
							_user$project$Page_Login$LoggedInRemember(_p2));
					},
					_user$project$Api_Login$login(
						{email: email, password: _p3})),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			{
				page: _user$project$Util_Types$LoginWindow,
				authToken: '',
				deletingStationPopup: false,
				updatingStationPopup: false,
				username: _elm_lang$core$Maybe$Nothing,
				newUser: _elm_lang$core$Maybe$Just(true),
				mdl: _debois$elm_mdl$Material$model,
				keyPress: 0,
				seek: 0,
				isPlaying: false,
				audioLevel: flags.audioLevel,
				audioHover: false,
				currentTime: 0,
				songQueue: {ctor: '[]'},
				currentStation: _elm_lang$core$Maybe$Nothing,
				stations: {ctor: '[]'},
				previousSongs: {ctor: '[]'},
				loginModel: {email: email, password: '', remember: false, failed: false},
				selectorModel: {
					state: _user$project$Util_Types$Selecting,
					previousSongs: {ctor: '[]'},
					searchResults: _elm_lang$core$Dict$empty,
					searchInput: ''
				},
				uiModel: {}
			},
			{ctor: '[]'});
	}
};
var _user$project$Main$update = F2(
	function (msg, gm) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'LoginMsg':
				var _p5 = A3(_user$project$Page_Login$update, _p4._0, gm.loginModel, gm);
				var logModel = _p5._0;
				var glModel = _p5._1;
				var cmd = _p5._2;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						glModel,
						{loginModel: logModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$LoginMsg, cmd)
				};
			case 'SelectorMsg':
				var _p6 = A3(_user$project$Page_StationSelector$update, _p4._0, gm.selectorModel, gm);
				var selModel = _p6._0;
				var glModel = _p6._1;
				var cmd = _p6._2;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						glModel,
						{selectorModel: selModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$SelectorMsg, cmd)
				};
			case 'UiMsg':
				var _p7 = A3(_user$project$View_Ui$update, _p4._0, gm.uiModel, gm);
				var uiModel = _p7._0;
				var glModel = _p7._1;
				var cmd = _p7._2;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						glModel,
						{uiModel: uiModel}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$UiMsg, cmd)
				};
			case 'SongEnded':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						gm,
						{
							songQueue: A2(_elm_lang$core$List$drop, 1, gm.songQueue),
							previousSongs: {
								ctor: '::',
								_0: function () {
									var _p8 = _elm_lang$core$List$head(gm.songQueue);
									if (_p8.ctor === 'Just') {
										return _p8._0;
									} else {
										return {songTitle: '', trackLength: 0, rating: 0, audioURL: '', artistName: '', albumTitle: '', albumArt: '', trackToken: ''};
									}
								}(),
								_1: gm.previousSongs
							},
							currentTime: 0,
							isPlaying: true
						}),
					_1: _user$project$Util_Types$cmds(
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(gm.songQueue),
								2) ? A2(
								_elm_lang$http$Http$send,
								_user$project$Main$LoadedNextSongs,
								A3(_user$project$Api_Song$getNext, _p4._0, gm.authToken, false)) : _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						})
				};
			case 'LoadedNextSongs':
				var _p9 = _p4._0;
				if (_p9.ctor === 'Ok') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							gm,
							{
								songQueue: A2(_elm_lang$core$List$append, gm.songQueue, _p9._0)
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						gm,
						{ctor: '[]'});
				}
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p4._0, gm);
			case 'KeyDown':
				var _p13 = _p4._0;
				var _p10 = gm.page;
				if (_p10.ctor === 'LoginWindow') {
					return {
						ctor: '_Tuple2',
						_0: gm,
						_1: _user$project$Util_Types$cmds(
							_elm_lang$core$Native_Utils.eq(_p13, 13) ? (gm.loginModel.remember ? {
								ctor: '::',
								_0: A2(
									_elm_lang$http$Http$send,
									function (_p11) {
										return _user$project$Main$LoginMsg(
											_user$project$Page_Login$LoggedInRemember(_p11));
									},
									_user$project$Api_Login$login(
										{email: gm.loginModel.email, password: gm.loginModel.password})),
								_1: {
									ctor: '::',
									_0: _user$project$Util_Port$rememberEmail(gm.loginModel.email),
									_1: {
										ctor: '::',
										_0: _user$project$Util_Port$rememberPassword(gm.loginModel.password),
										_1: {ctor: '[]'}
									}
								}
							} : {
								ctor: '::',
								_0: A2(
									_elm_lang$http$Http$send,
									function (_p12) {
										return _user$project$Main$LoginMsg(
											_user$project$Page_Login$LoggedIn(_p12));
									},
									_user$project$Api_Login$login(
										{email: gm.loginModel.email, password: gm.loginModel.password})),
								_1: {ctor: '[]'}
							}) : {ctor: '[]'})
					};
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.eq(_p13, 32) ? _elm_lang$core$Native_Utils.update(
							gm,
							{isPlaying: !gm.isPlaying, keyPress: _p13}) : _elm_lang$core$Native_Utils.update(
							gm,
							{isPlaying: gm.isPlaying}),
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(_p13, 32) ? _user$project$Util_Port$togglePause(
								{ctor: '_Tuple0'}) : _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						});
				}
			case 'SetNewTime':
				var _p14 = _elm_lang$core$List$head(gm.songQueue);
				if (_p14.ctor === 'Just') {
					var newTime = (gm.seek / _p4._0) * _elm_lang$core$Basics$toFloat(_p14._0.trackLength);
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							gm,
							{currentTime: newTime}),
						{
							ctor: '::',
							_0: _user$project$Util_Port$sendNewTime(newTime),
							_1: {ctor: '[]'}
						});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						gm,
						{ctor: '[]'});
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						gm,
						{currentTime: gm.currentTime + 1}),
					_1: _user$project$Util_Types$cmds(
						{ctor: '[]'})
				};
		}
	});
var _user$project$Main$view = function (gm) {
	var song = A2(
		_elm_lang$html$Html$audio,
		{
			ctor: '::',
			_0: _user$project$Main$onEnded(
				function () {
					var _p15 = gm.currentStation;
					if (_p15.ctor === 'Just') {
						return _p15._0.id;
					} else {
						return '';
					}
				}()),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('songAudio'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$src(
						function () {
							var _p16 = _elm_lang$core$List$head(gm.songQueue);
							if (_p16.ctor === 'Just') {
								return _p16._0.audioURL;
							} else {
								return '';
							}
						}()),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$autoplay(true),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
	var content = function () {
		var _p17 = gm.page;
		switch (_p17.ctor) {
			case 'LoginWindow':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$LoginMsg,
					_user$project$Page_Login$view(gm));
			case 'Player':
				return _user$project$View_Player$viewSongInfo(gm);
			case 'StationSelector':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$SelectorMsg,
					_user$project$Page_StationSelector$view(gm));
			default:
				return _elm_lang$html$Html$text('');
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'overflow-x', _1: 'hidden'},
								_1: {ctor: '[]'}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: song,
			_1: {
				ctor: '::',
				_0: A2(_user$project$Main$viewPlayer, gm, content),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (audioLevel) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (email) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (newUser) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (password) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (username) {
											return _elm_lang$core$Json_Decode$succeed(
												{audioLevel: audioLevel, email: email, newUser: newUser, password: password, username: username});
										},
										A2(
											_elm_lang$core$Json_Decode$field,
											'username',
											_elm_lang$core$Json_Decode$oneOf(
												{
													ctor: '::',
													_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
													_1: {
														ctor: '::',
														_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
														_1: {ctor: '[]'}
													}
												})));
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'password',
									_elm_lang$core$Json_Decode$oneOf(
										{
											ctor: '::',
											_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
												_1: {ctor: '[]'}
											}
										})));
						},
						A2(
							_elm_lang$core$Json_Decode$field,
							'newUser',
							_elm_lang$core$Json_Decode$oneOf(
								{
									ctor: '::',
									_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
										_1: {ctor: '[]'}
									}
								})));
				},
				A2(
					_elm_lang$core$Json_Decode$field,
					'email',
					_elm_lang$core$Json_Decode$oneOf(
						{
							ctor: '::',
							_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
								_1: {ctor: '[]'}
							}
						})));
		},
		A2(
			_elm_lang$core$Json_Decode$field,
			'audioLevel',
			_elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$float),
						_1: {ctor: '[]'}
					}
				}))));
