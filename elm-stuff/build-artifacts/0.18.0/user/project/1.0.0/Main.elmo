var _user$project$Main$viewChat = function (chat) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1%'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: (!_elm_lang$core$Native_Utils.eq(chat.username, '')) ? A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(chat.username),
					_1: {ctor: '[]'}
				}) : A2(
				_elm_lang$html$Html$p,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'font-weight', _1: 'bold'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(chat.email),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '1.5%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0.04%'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(chat.content),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$viewAllChats = function (chatList) {
	return A2(_elm_lang$core$List$map, _user$project$Main$viewChat, chatList);
};
var _user$project$Main$viewChatRooms = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'rgb(223, 223, 223)'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '15%'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '95%'},
						_1: {ctor: '[]'}
					}
				}
			}),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _user$project$Main$darkEle = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'z-index', _1: '2'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'rgba(0, 0, 0, 0.5)'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'top', _1: '0'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'bottom', _1: '0'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'right', _1: '0'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}),
		_1: {ctor: '[]'}
	},
	{ctor: '[]'});
var _user$project$Main$viewSongInfo = function (model) {
	var _p0 = model.state;
	if (_p0.ctor === 'LoggingIn') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		var _p5 = _p0._0;
		return model.startStationError ? A2(
			_elm_lang$html$Html$h3,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Error starting station :('),
				_1: {ctor: '[]'}
			}) : (model.loadingSongError ? A2(
			_elm_lang$html$Html$h3,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Error loading song :('),
				_1: {ctor: '[]'}
			}) : A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'flex-direction', _1: 'column'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '60%'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$img,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '-webkit-user-select', _1: 'none'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'box-shadow', _1: '0.25px 0.25px black'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'border', _1: '1px black solid'},
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$src(
								function () {
									var _p1 = _elm_lang$core$List$head(_p5.songQueue);
									if (_p1.ctor === 'Just') {
										return _p1._0.albumArt;
									} else {
										return 'fillerIMG.jpg';
									}
								}()),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('playerAlbumArt'),
								_1: {ctor: '[]'}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '4%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0px'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('songTitle'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: function () {
								var _p2 = _elm_lang$core$List$head(_p5.songQueue);
								if (_p2.ctor === 'Just') {
									return _elm_lang$html$Html$text(_p2._0.songTitle);
								} else {
									return _elm_lang$core$Native_Utils.eq(_p5.currentStation, _elm_lang$core$Maybe$Nothing) ? _elm_lang$html$Html$text('Select a station to listen') : _debois$elm_mdl$Material_Spinner$spinner(
										{
											ctor: '::',
											_0: _debois$elm_mdl$Material_Spinner$active(true),
											_1: {ctor: '[]'}
										});
								}
							}(),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5px'},
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('songDetails'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									function () {
										var _p3 = _elm_lang$core$List$head(_p5.songQueue);
										if (_p3.ctor === 'Just') {
											var _p4 = _p3._0;
											return A2(
												_elm_lang$core$Basics_ops['++'],
												_p4.artistName,
												A2(_elm_lang$core$Basics_ops['++'], ' - ', _p4.albumTitle));
										} else {
											return '';
										}
									}()),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}));
	}
};
var _user$project$Main$timePercentage = F2(
	function (currentTime, songQueue) {
		return 100 * (currentTime / function () {
			var _p6 = _elm_lang$core$List$head(songQueue);
			if (_p6.ctor === 'Just') {
				return _elm_lang$core$Basics$toFloat(_p6._0.trackLength);
			} else {
				return 1.0;
			}
		}());
	});
var _user$project$Main$authDecode = A2(
	_elm_lang$core$Json_Decode$at,
	{
		ctor: '::',
		_0: 'authToken',
		_1: {ctor: '[]'}
	},
	_elm_lang$core$Json_Decode$string);
var _user$project$Main$login = function (info) {
	return _elm_lang$http$Http$request(
		{
			method: 'POST',
			headers: {
				ctor: '::',
				_0: A2(_elm_lang$http$Http$header, 'X-CsrfToken', 'coolestToken'),
				_1: {ctor: '[]'}
			},
			url: 'https://www.pandora.com/api/v1/auth/login',
			body: _elm_lang$http$Http$jsonBody(
				_elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'username',
							_1: _elm_lang$core$Json_Encode$string(info.email)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'password',
								_1: _elm_lang$core$Json_Encode$string(info.password)
							},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'existingAuthToken', _1: _elm_lang$core$Json_Encode$null},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'keepLoggedIn',
										_1: _elm_lang$core$Json_Encode$bool(true)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					})),
			expect: _elm_lang$http$Http$expectJson(_user$project$Main$authDecode),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _user$project$Main$getCurrentStation = function (model) {
	var _p7 = model.state;
	if (_p7.ctor === 'LoggingIn') {
		return {id: '', name: 'Select a station', art: ''};
	} else {
		var _p8 = _p7._0.currentStation;
		if (_p8.ctor === 'Just') {
			return _p8._0;
		} else {
			return {id: '', name: 'Select a station', art: ''};
		}
	}
};
var _user$project$Main$stateCase = F4(
	function (model, playing, loggingIn, failed) {
		var _p9 = model.state;
		if (_p9.ctor === 'Playing') {
			return playing;
		} else {
			return loggingIn;
		}
	});
var _user$project$Main$currentSong = function (model) {
	var _p10 = model.state;
	if (_p10.ctor === 'LoggingIn') {
		return {songTitle: '', trackLength: 0, rating: 0, audioURL: '', artistName: '', albumTitle: '', albumArt: '', trackToken: ''};
	} else {
		var _p11 = _elm_lang$core$List$head(_p10._0.songQueue);
		if (_p11.ctor === 'Just') {
			return _p11._0;
		} else {
			return {songTitle: '', trackLength: 0, rating: 0, audioURL: '', artistName: '', albumTitle: '', albumArt: '', trackToken: ''};
		}
	}
};
var _user$project$Main$togglePause = _elm_lang$core$Native_Platform.outgoingPort(
	'togglePause',
	function (v) {
		return null;
	});
var _user$project$Main$replaySong = _elm_lang$core$Native_Platform.outgoingPort(
	'replaySong',
	function (v) {
		return null;
	});
var _user$project$Main$audioLevel = _elm_lang$core$Native_Platform.outgoingPort(
	'audioLevel',
	function (v) {
		return v;
	});
var _user$project$Main$rememberEmail = _elm_lang$core$Native_Platform.outgoingPort(
	'rememberEmail',
	function (v) {
		return v;
	});
var _user$project$Main$rememberUsername = _elm_lang$core$Native_Platform.outgoingPort(
	'rememberUsername',
	function (v) {
		return v;
	});
var _user$project$Main$rememberPassword = _elm_lang$core$Native_Platform.outgoingPort(
	'rememberPassword',
	function (v) {
		return v;
	});
var _user$project$Main$newUser = _elm_lang$core$Native_Platform.outgoingPort(
	'newUser',
	function (v) {
		return null;
	});
var _user$project$Main$getProgressBarWidth = _elm_lang$core$Native_Platform.outgoingPort(
	'getProgressBarWidth',
	function (v) {
		return null;
	});
var _user$project$Main$sendProgressBarWidth = _elm_lang$core$Native_Platform.incomingPort('sendProgressBarWidth', _elm_lang$core$Json_Decode$float);
var _user$project$Main$sendNewTime = _elm_lang$core$Native_Platform.outgoingPort(
	'sendNewTime',
	function (v) {
		return v;
	});
var _user$project$Main$chatSocket = _elm_lang$core$Native_Platform.incomingPort(
	'chatSocket',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (email) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (username) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (content) {
							return _elm_lang$core$Json_Decode$succeed(
								{email: email, username: username, content: content});
						},
						A2(_elm_lang$core$Json_Decode$field, 'content', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'email', _elm_lang$core$Json_Decode$string)));
var _user$project$Main$logOutLocalStorage = _elm_lang$core$Native_Platform.outgoingPort(
	'logOutLocalStorage',
	function (v) {
		return null;
	});
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {state: a, mdl: b, getStationError: c, startStationError: d, loadingSongError: e, keyPress: f};
	});
var _user$project$Main$Flags = F5(
	function (a, b, c, d, e) {
		return {password: a, audioLevel: b, username: c, email: d, newUser: e};
	});
var _user$project$Main$Chatting = function (a) {
	return {ctor: 'Chatting', _0: a};
};
var _user$project$Main$PreviousSongs = {ctor: 'PreviousSongs'};
var _user$project$Main$SelectingPlaying = {ctor: 'SelectingPlaying'};
var _user$project$Main$SelectingStation = {ctor: 'SelectingStation'};
var _user$project$Main$Normal = {ctor: 'Normal'};
var _user$project$Main$Playing = function (a) {
	return {ctor: 'Playing', _0: a};
};
var _user$project$Main$LoggingIn = function (a) {
	return {ctor: 'LoggingIn', _0: a};
};
var _user$project$Main$ChatSocket = function (a) {
	return {ctor: 'ChatSocket', _0: a};
};
var _user$project$Main$SentChat = function (a) {
	return {ctor: 'SentChat', _0: a};
};
var _user$project$Main$SendChat = {ctor: 'SendChat'};
var _user$project$Main$GotChats = function (a) {
	return {ctor: 'GotChats', _0: a};
};
var _user$project$Main$SetUserName = {ctor: 'SetUserName'};
var _user$project$Main$UserNameInput = function (a) {
	return {ctor: 'UserNameInput', _0: a};
};
var _user$project$Main$ChatInput = function (a) {
	return {ctor: 'ChatInput', _0: a};
};
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$NoOp1 = function (a) {
	return {ctor: 'NoOp1', _0: a};
};
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$ifEmptyQueue = F2(
	function (model, msg) {
		var _p12 = model.state;
		if (_p12.ctor === 'LoggingIn') {
			return _user$project$Main$NoOp;
		} else {
			return (!_elm_lang$core$Native_Utils.eq(
				_p12._0.songQueue,
				{ctor: '[]'})) ? msg : _user$project$Main$NoOp;
		}
	});
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$chatInput = function (model) {
	var _p13 = model.state;
	if (_p13.ctor === 'LoggingIn') {
		return _elm_lang$html$Html$text('');
	} else {
		var _p14 = _p13._0.playingState;
		switch (_p14.ctor) {
			case 'Normal':
				return _elm_lang$html$Html$text('');
			case 'SelectingPlaying':
				return _elm_lang$html$Html$text('');
			case 'SelectingStation':
				return _elm_lang$html$Html$text('');
			case 'PreviousSongs':
				return _elm_lang$html$Html$text('');
			default:
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '6%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '89.75%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '1%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '3%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '5px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '95%'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(_p14._0.chatInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$ChatInput),
										_1: {
											ctor: '::',
											_0: A3(
												_elm_lang$html$Html_Events$onWithOptions,
												'keydown',
												{stopPropagation: true, preventDefault: false},
												_elm_lang$core$Json_Decode$succeed(_user$project$Main$NoOp)),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Button$render,
								_user$project$Main$Mdl,
								{
									ctor: '::',
									_0: 7834,
									_1: {ctor: '[]'}
								},
								model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Button$ripple,
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'height', '100%'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '.45%'),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$SendChat),
												_1: {ctor: '[]'}
											}
										}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Send'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					});
		}
	}
};
var _user$project$Main$chatLogin = F2(
	function (model, nameInput) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'z-index', _1: '2'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'white'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'flex-direction', _1: 'column'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '60%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h3,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Please enter a username: '),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$p,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('This is what other users will see when you send a message'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '10%'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('chatLoginAltOpt'),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Or click here to use your email instead'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$input,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$type_('text'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UserNameInput),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: '12%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '2%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '100%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: 'auto'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Button$render,
									_user$project$Main$Mdl,
									{
										ctor: '::',
										_0: 18,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Button$minifab,
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Button$ripple,
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.eq(nameInput, '') ? _debois$elm_mdl$Material_Options$onClick(_user$project$Main$NoOp) : _debois$elm_mdl$Material_Options$onClick(_user$project$Main$SetUserName),
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'height', '20%'),
													_1: {
														ctor: '::',
														_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-bottom', '0px'),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									},
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Icon$i('arrow_right_alt'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _user$project$Main$viewChatWindow = function (model) {
	var _p15 = model.state;
	if (_p15.ctor === 'LoggingIn') {
		return _elm_lang$html$Html$text('');
	} else {
		var _p16 = _p15._0.playingState;
		switch (_p16.ctor) {
			case 'Normal':
				return _elm_lang$html$Html$text('');
			case 'SelectingStation':
				return _elm_lang$html$Html$text('');
			case 'SelectingPlaying':
				return _elm_lang$html$Html$text('');
			case 'PreviousSongs':
				return _elm_lang$html$Html$text('');
			default:
				var _p17 = _p16._0;
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'flex-direction', _1: 'column'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
												_1: {ctor: '[]'}
											}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$Main$viewChatRooms,
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0px'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'width', _1: '84%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: '95%'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'overflow-y', _1: 'auto'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										_user$project$Main$viewAllChats(_p17.chats)),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Main$chatInput(model),
							_1: {
								ctor: '::',
								_0: _p17.newUser ? _user$project$Main$darkEle : _elm_lang$html$Html$text(''),
								_1: {
									ctor: '::',
									_0: _p17.newUser ? A2(_user$project$Main$chatLogin, model, _p17.userNameInput) : _elm_lang$html$Html$text(''),
									_1: {ctor: '[]'}
								}
							}
						}
					});
		}
	}
};
var _user$project$Main$RemovedFeedBack = function (a) {
	return {ctor: 'RemovedFeedBack', _0: a};
};
var _user$project$Main$SentFeedBack = function (a) {
	return {ctor: 'SentFeedBack', _0: a};
};
var _user$project$Main$RemoveThumbsUp = function (a) {
	return {ctor: 'RemoveThumbsUp', _0: a};
};
var _user$project$Main$SendThumbsUp = function (a) {
	return {ctor: 'SendThumbsUp', _0: a};
};
var _user$project$Main$SendThumbsDown = function (a) {
	return {ctor: 'SendThumbsDown', _0: a};
};
var _user$project$Main$PlayPreviousSong = function (a) {
	return {ctor: 'PlayPreviousSong', _0: a};
};
var _user$project$Main$viewPreviousSong = function (song) {
	return A2(
		_debois$elm_mdl$Material_Grid$cell,
		{
			ctor: '::',
			_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 3),
			_1: {
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-bottom', '25px '),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'text-align', 'center'),
					_1: {ctor: '[]'}
				}
			}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '150px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '175px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_user$project$Main$PlayPreviousSong(song)),
						_1: {ctor: '[]'}
					}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$img,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '150px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '150px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid black'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'box-shadow', _1: '0.25px 0.25px black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: '-webkit-user-select', _1: 'none'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src(song.albumArt),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(song.songTitle),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$viewPreviousSongs = function (model) {
	var _p18 = model.state;
	if (_p18.ctor === 'LoggingIn') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		return A2(
			_debois$elm_mdl$Material_Grid$grid,
			{
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '100%'),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '0px'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'overflow-y', 'auto'),
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$List$map,
				function (song) {
					return _user$project$Main$viewPreviousSong(song);
				},
				_p18._0.previousSongs));
	}
};
var _user$project$Main$ToChat = {ctor: 'ToChat'};
var _user$project$Main$ToPreviousSongs = {ctor: 'ToPreviousSongs'};
var _user$project$Main$ToPlaying = {ctor: 'ToPlaying'};
var _user$project$Main$ToStations = {ctor: 'ToStations'};
var _user$project$Main$UnHoveringAudio = {ctor: 'UnHoveringAudio'};
var _user$project$Main$onUnHover = A2(
	_elm_lang$html$Html_Events$on,
	'mouseout',
	_elm_lang$core$Json_Decode$succeed(_user$project$Main$UnHoveringAudio));
var _user$project$Main$HoveringAudio = {ctor: 'HoveringAudio'};
var _user$project$Main$onHover = A2(
	_elm_lang$html$Html_Events$on,
	'mouseover',
	_elm_lang$core$Json_Decode$succeed(_user$project$Main$HoveringAudio));
var _user$project$Main$UnMute = {ctor: 'UnMute'};
var _user$project$Main$Mute = {ctor: 'Mute'};
var _user$project$Main$SetAudio = function (a) {
	return {ctor: 'SetAudio', _0: a};
};
var _user$project$Main$audioSlider = F2(
	function (modelAudioLevel, visibleVal) {
		return _debois$elm_mdl$Material_Slider$view(
			{
				ctor: '::',
				_0: _debois$elm_mdl$Material_Slider$onChange(_user$project$Main$SetAudio),
				_1: {
					ctor: '::',
					_0: _debois$elm_mdl$Material_Slider$max(1),
					_1: {
						ctor: '::',
						_0: _debois$elm_mdl$Material_Slider$min(0),
						_1: {
							ctor: '::',
							_0: _debois$elm_mdl$Material_Slider$step(0.1),
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Slider$value(modelAudioLevel),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '100px'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-top', '8px'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'z-index', '2'),
											_1: {
												ctor: '::',
												_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', '0px'),
												_1: {
													ctor: '::',
													_0: A2(_debois$elm_mdl$Material_Options$css, 'visibility', visibleVal),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	});
var _user$project$Main$audioSelector = F3(
	function (modelAudioLevel, modelAudioHover, modelPreviousSongs) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Main$onHover,
				_1: {
					ctor: '::',
					_0: _user$project$Main$onUnHover,
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-right', _1: 'auto'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-right', _1: 'auto'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '5px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'z-index', _1: '3'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: '-webkit-user-select', _1: 'none'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('material-icons topIcons'),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.eq(modelAudioLevel, 0) ? _elm_lang$html$Html_Events$onClick(_user$project$Main$UnMute) : _elm_lang$html$Html_Events$onClick(_user$project$Main$Mute),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							_elm_lang$core$Native_Utils.eq(modelAudioLevel, 0) ? 'volume_off' : ((_elm_lang$core$Native_Utils.cmp(modelAudioLevel, 0.5) > 0) ? 'volume_up' : 'volume_down')),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: modelAudioHover ? A2(_user$project$Main$audioSlider, modelAudioLevel, 'visible') : A2(_user$project$Main$audioSlider, modelAudioLevel, 'hidden'),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$LoadedNextSongs = function (a) {
	return {ctor: 'LoadedNextSongs', _0: a};
};
var _user$project$Main$LoadNextSongs = function (a) {
	return {ctor: 'LoadNextSongs', _0: a};
};
var _user$project$Main$SkipSong = function (a) {
	return {ctor: 'SkipSong', _0: a};
};
var _user$project$Main$SongEnded = function (a) {
	return {ctor: 'SongEnded', _0: a};
};
var _user$project$Main$onEnded = function (stationId) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'ended',
		_elm_lang$core$Json_Decode$succeed(
			_user$project$Main$SongEnded(stationId)));
};
var _user$project$Main$SetNewTime = function (a) {
	return {ctor: 'SetNewTime', _0: a};
};
var _user$project$Main$SetSeekLocation = function (a) {
	return {ctor: 'SetSeekLocation', _0: a};
};
var _user$project$Main$onClickXVal = A2(
	_elm_lang$html$Html_Events$on,
	'click',
	A2(
		_elm_lang$core$Json_Decode$map,
		_user$project$Main$SetSeekLocation,
		A2(_elm_lang$core$Json_Decode$field, 'clientX', _elm_lang$core$Json_Decode$float)));
var _user$project$Main$viewProgressBar = function (model) {
	var _p19 = model.state;
	if (_p19.ctor === 'LoggingIn') {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		var _p20 = _p19._0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '10%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'black'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
									_1: {ctor: '[]'}
								}
							}
						}
					}),
				_1: {
					ctor: '::',
					_0: _user$project$Main$onClickXVal,
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('progressBar'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'width',
										_1: A2(
											_elm_lang$core$Basics_ops['++'],
											_elm_lang$core$Basics$toString(
												A2(_user$project$Main$timePercentage, _p20.currentTime, _p20.songQueue)),
											'%')
									},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'white'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'border-top', _1: '1px black solid'},
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	}
};
var _user$project$Main$SetCurrentTime = function (a) {
	return {ctor: 'SetCurrentTime', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	var _p21 = model.state;
	if (_p21.ctor === 'LoggingIn') {
		return _elm_lang$core$Platform_Sub$batch(
			{
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
				_1: {ctor: '[]'}
			});
	} else {
		return _elm_lang$core$Platform_Sub$batch(
			{
				ctor: '::',
				_0: (_p21._0.isPlaying && (!(model.getStationError || (model.loadingSongError || model.startStationError)))) ? A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$SetCurrentTime) : _elm_lang$core$Platform_Sub$none,
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material$subscriptions, _user$project$Main$Mdl, model),
					_1: {
						ctor: '::',
						_0: _user$project$Main$sendProgressBarWidth(_user$project$Main$SetNewTime),
						_1: {
							ctor: '::',
							_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
							_1: {
								ctor: '::',
								_0: _user$project$Main$chatSocket(_user$project$Main$ChatSocket),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	}
};
var _user$project$Main$ReplaySong = {ctor: 'ReplaySong'};
var _user$project$Main$TogglePause = {ctor: 'TogglePause'};
var _user$project$Main$controller = F3(
	function (model, notClickable, stationId) {
		var _p22 = model.state;
		if (_p22.ctor === 'LoggingIn') {
			return {ctor: '[]'};
		} else {
			var _p26 = _p22._0;
			return notClickable ? {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								A2(
									_user$project$Main$ifEmptyQueue,
									model,
									_user$project$Main$SendThumbsDown(stationId))),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '20px'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('thumb_down_alt'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$i,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									A2(_user$project$Main$ifEmptyQueue, model, _user$project$Main$ReplaySong)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '26px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '20px'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('replay'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										A2(_user$project$Main$ifEmptyQueue, model, _user$project$Main$TogglePause)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '40px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10px'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '10px'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_p26.isPlaying ? 'pause' : 'play_arrow'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_debois$elm_mdl$Material_Icon$view,
								'skip_next',
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Options$cs('material-icons controlIcons'),
									_1: {
										ctor: '::',
										_0: A2(_debois$elm_mdl$Material_Options$css, 'font-size', '26px'),
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-right', '20px'),
											_1: {
												ctor: '::',
												_0: _debois$elm_mdl$Material_Options$onClick(
													A2(
														_user$project$Main$ifEmptyQueue,
														model,
														_user$project$Main$SkipSong(stationId))),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Tooltip$attach,
														_user$project$Main$Mdl,
														{
															ctor: '::',
															_0: 690,
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A5(
									_debois$elm_mdl$Material_Tooltip$render,
									_user$project$Main$Mdl,
									{
										ctor: '::',
										_0: 690,
										_1: {ctor: '[]'}
									},
									model.mdl,
									{
										ctor: '::',
										_0: _debois$elm_mdl$Material_Tooltip$top,
										_1: {
											ctor: '::',
											_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '300px'),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'flex-direction', _1: 'column'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$img,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$style(
															{
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$src(
																function () {
																	var _p23 = _elm_lang$core$List$head(
																		A2(_elm_lang$core$List$drop, 1, _p26.songQueue));
																	if (_p23.ctor === 'Just') {
																		return _p23._0.albumArt;
																	} else {
																		return '';
																	}
																}()),
															_1: {ctor: '[]'}
														}
													},
													{ctor: '[]'}),
												_1: {
													ctor: '::',
													_0: A2(
														_elm_lang$html$Html$p,
														{
															ctor: '::',
															_0: _elm_lang$html$Html_Attributes$style(
																{
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '0px'},
																		_1: {ctor: '[]'}
																	}
																}),
															_1: {ctor: '[]'}
														},
														{
															ctor: '::',
															_0: _elm_lang$html$Html$text(
																function () {
																	var _p24 = _elm_lang$core$List$head(
																		A2(_elm_lang$core$List$drop, 1, _p26.songQueue));
																	if (_p24.ctor === 'Just') {
																		var _p25 = _p24._0;
																		return A2(
																			_elm_lang$core$Basics_ops['++'],
																			_p25.songTitle,
																			A2(_elm_lang$core$Basics_ops['++'], ' - ', _p25.artistName));
																	} else {
																		return '';
																	}
																}()),
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$i,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
											_1: {
												ctor: '::',
												_0: _elm_lang$core$Native_Utils.eq(
													_user$project$Main$currentSong(model).rating,
													1) ? _elm_lang$html$Html_Events$onClick(
													_user$project$Main$RemoveThumbsUp(stationId)) : _elm_lang$html$Html_Events$onClick(
													_user$project$Main$SendThumbsUp(stationId)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'font-size', _1: '20px'},
															_1: {
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.eq(
																	_user$project$Main$currentSong(model).rating,
																	1) ? {ctor: '_Tuple2', _0: 'color', _1: '#6499ef'} : {ctor: '_Tuple2', _0: 'opacity', _1: '1'},
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('thumb_up_alt'),
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			} : {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$i,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'font-size', _1: '20px'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('thumb_down_alt'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$i,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'font-size', _1: '26px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '20px'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('replay'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$i,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'font-size', _1: '40px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '10px'},
													_1: {ctor: '[]'}
												}
											}
										}),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('play_arrow'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$i,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'font-size', _1: '26px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'margin-right', _1: '20px'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('skip_next'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$i,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('material-icons controlIcons'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'font-size', _1: '20px'},
													_1: {
														ctor: '::',
														_0: _elm_lang$core$Native_Utils.eq(
															_user$project$Main$currentSong(model).rating,
															1) ? {ctor: '_Tuple2', _0: 'color', _1: '#6499ef'} : {ctor: '_Tuple2', _0: 'opacity', _1: '1'},
														_1: {ctor: '[]'}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('thumb_up_alt'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			};
		}
	});
var _user$project$Main$viewControls = F2(
	function (model, stationId) {
		var _p27 = model.state;
		if (_p27.ctor === 'LoggingIn') {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		} else {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'margin-top', _1: 'auto'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: '-webkit-user-select', _1: 'none'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '10%'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Main$viewProgressBar(model),
					_1: {
						ctor: '::',
						_0: function () {
							var _p28 = _p27._0.playingState;
							switch (_p28.ctor) {
								case 'Normal':
									return A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#323842'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										A3(_user$project$Main$controller, model, true, stationId));
								case 'SelectingPlaying':
									return A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#323842'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$ToPlaying),
												_1: {ctor: '[]'}
											}
										},
										A3(_user$project$Main$controller, model, true, stationId));
								case 'SelectingStation':
									return A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#323842'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
																		_1: {ctor: '[]'}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										A3(_user$project$Main$controller, model, false, stationId));
								case 'PreviousSongs':
									return A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#323842'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$ToPlaying),
												_1: {ctor: '[]'}
											}
										},
										A3(_user$project$Main$controller, model, true, stationId));
								default:
									return A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'height', _1: '90%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#323842'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'justify-content', _1: 'center'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'align-items', _1: 'center'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										A3(_user$project$Main$controller, model, true, stationId));
							}
						}(),
						_1: {ctor: '[]'}
					}
				});
		}
	});
var _user$project$Main$StartedStation = function (a) {
	return {ctor: 'StartedStation', _0: a};
};
var _user$project$Main$StartStation = F3(
	function (a, b, c) {
		return {ctor: 'StartStation', _0: a, _1: b, _2: c};
	});
var _user$project$Main$viewStation = F3(
	function (id, name, url) {
		return A2(
			_debois$elm_mdl$Material_Grid$cell,
			{
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Grid$size, _debois$elm_mdl$Material_Grid$Desktop, 3),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-bottom', '25px '),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'text-align', 'center'),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '150px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '175px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								A3(_user$project$Main$StartStation, id, name, url)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$img,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '150px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '150px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid black'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'box-shadow', _1: '0.25px 0.25px black'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: '-webkit-user-select', _1: 'none'},
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$src(url),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$p,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(name),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$viewStationSelector = F2(
	function (model, stations) {
		return model.getStationError ? A2(
			_elm_lang$html$Html$h3,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Error retrieving stations :('),
				_1: {ctor: '[]'}
			}) : A2(
			_debois$elm_mdl$Material_Grid$grid,
			{
				ctor: '::',
				_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '100%'),
				_1: {
					ctor: '::',
					_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '0px'),
					_1: {
						ctor: '::',
						_0: A2(_debois$elm_mdl$Material_Options$css, 'overflow-y', 'auto'),
						_1: {ctor: '[]'}
					}
				}
			},
			A2(
				_elm_lang$core$List$map,
				function (station) {
					return A3(_user$project$Main$viewStation, station.id, station.name, station.art);
				},
				stations));
	});
var _user$project$Main$GotStations = function (a) {
	return {ctor: 'GotStations', _0: a};
};
var _user$project$Main$LoggedInRemember = function (a) {
	return {ctor: 'LoggedInRemember', _0: a};
};
var _user$project$Main$init = function (flags) {
	var _p29 = flags.password;
	if (_p29.ctor === 'Just') {
		var _p32 = _p29._0;
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			{
				state: _user$project$Main$LoggingIn(
					{
						email: function () {
							var _p30 = flags.email;
							if (_p30.ctor === 'Just') {
								return _p30._0;
							} else {
								return '';
							}
						}(),
						password: _p32,
						remember: true,
						failed: false,
						audioLevel: flags.audioLevel,
						username: flags.username,
						newUser: _elm_lang$core$Native_Utils.eq(
							flags.newUser,
							_elm_lang$core$Maybe$Just('false')) ? _elm_lang$core$Maybe$Just(false) : _elm_lang$core$Maybe$Just(true)
					}),
				mdl: _debois$elm_mdl$Material$model,
				getStationError: false,
				startStationError: false,
				loadingSongError: false,
				keyPress: 0
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$http$Http$send,
					_user$project$Main$LoggedInRemember,
					_user$project$Main$login(
						{
							email: function () {
								var _p31 = flags.email;
								if (_p31.ctor === 'Just') {
									return _p31._0;
								} else {
									return '';
								}
							}(),
							password: _p32
						})),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			{
				state: _user$project$Main$LoggingIn(
					{email: '', password: '', remember: false, failed: false, audioLevel: flags.audioLevel, username: _elm_lang$core$Maybe$Nothing, newUser: _elm_lang$core$Maybe$Nothing}),
				mdl: _debois$elm_mdl$Material$model,
				getStationError: false,
				startStationError: false,
				loadingSongError: false,
				keyPress: 0
			},
			{ctor: '[]'});
	}
};
var _user$project$Main$LoggedIn = function (a) {
	return {ctor: 'LoggedIn', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p33 = msg;
		switch (_p33.ctor) {
			case 'InputEmail':
				var _p34 = model.state;
				if (_p34.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$LoggingIn(
									_elm_lang$core$Native_Utils.update(
										_p34._0,
										{email: _p33._0}))
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'InputPassword':
				var _p35 = model.state;
				if (_p35.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$LoggingIn(
									_elm_lang$core$Native_Utils.update(
										_p35._0,
										{password: _p33._0}))
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'Login':
				var _p36 = model.state;
				if (_p36.ctor === 'LoggingIn') {
					var _p37 = _p36._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$LoggedIn,
								_user$project$Main$login(
									{email: _p37.email, password: _p37.password})),
							_1: {ctor: '[]'}
						});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'LoginRemember':
				var _p38 = model.state;
				if (_p38.ctor === 'LoggingIn') {
					var _p39 = _p38._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$LoggedInRemember,
								_user$project$Main$login(
									{email: _p39.email, password: _p39.password})),
							_1: {
								ctor: '::',
								_0: _user$project$Main$rememberEmail(_p39.email),
								_1: {
									ctor: '::',
									_0: _user$project$Main$rememberPassword(_p39.password),
									_1: {ctor: '[]'}
								}
							}
						});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'LoggedInRemember':
				var _p40 = model.state;
				if (_p40.ctor === 'LoggingIn') {
					var _p46 = _p40._0;
					var _p41 = _p33._0;
					if (_p41.ctor === 'Ok') {
						var _p45 = _p41._0;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$Main$Playing(
										{
											authToken: _p45,
											stations: {ctor: '[]'},
											currentStation: _elm_lang$core$Maybe$Nothing,
											songQueue: {ctor: '[]'},
											currentTime: 0.0,
											previousSongs: {ctor: '[]'},
											audioLevel: function () {
												var _p42 = _p46.audioLevel;
												if (_p42.ctor === 'Just') {
													return _p42._0;
												} else {
													return 1.0;
												}
											}(),
											audioHover: false,
											isPlaying: false,
											playingState: _user$project$Main$SelectingStation,
											seek: 0,
											email: _p46.email,
											username: function () {
												var _p43 = _p46.username;
												if (_p43.ctor === 'Just') {
													return _p43._0;
												} else {
													return '';
												}
											}(),
											newUser: function () {
												var _p44 = _p46.newUser;
												if (_p44.ctor === 'Just') {
													return _p44._0;
												} else {
													return true;
												}
											}()
										})
								}),
							{
								ctor: '::',
								_0: A2(
									_elm_lang$http$Http$send,
									_user$project$Main$GotStations,
									_user$project$Types_Station$get(_p45)),
								_1: {
									ctor: '::',
									_0: _user$project$Main$rememberPassword(_p46.password),
									_1: {
										ctor: '::',
										_0: _user$project$Main$rememberEmail(_p46.email),
										_1: {ctor: '[]'}
									}
								}
							});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$Main$LoggingIn(
										_elm_lang$core$Native_Utils.update(
											_p46,
											{failed: true}))
								}),
							{ctor: '[]'});
					}
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'LoggedIn':
				var _p47 = model.state;
				if (_p47.ctor === 'LoggingIn') {
					var _p53 = _p47._0;
					var _p48 = _p33._0;
					if (_p48.ctor === 'Ok') {
						var _p52 = _p48._0;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$Main$Playing(
										{
											authToken: _p52,
											stations: {ctor: '[]'},
											currentStation: _elm_lang$core$Maybe$Nothing,
											songQueue: {ctor: '[]'},
											currentTime: 0.0,
											previousSongs: {ctor: '[]'},
											audioLevel: function () {
												var _p49 = _p53.audioLevel;
												if (_p49.ctor === 'Just') {
													return _p49._0;
												} else {
													return 1.0;
												}
											}(),
											audioHover: false,
											isPlaying: false,
											playingState: _user$project$Main$SelectingStation,
											seek: 0,
											email: _p53.email,
											username: function () {
												var _p50 = _p53.username;
												if (_p50.ctor === 'Just') {
													return _p50._0;
												} else {
													return '';
												}
											}(),
											newUser: function () {
												var _p51 = _p53.newUser;
												if (_p51.ctor === 'Just') {
													return _p51._0;
												} else {
													return true;
												}
											}()
										})
								}),
							{
								ctor: '::',
								_0: A2(
									_elm_lang$http$Http$send,
									_user$project$Main$GotStations,
									_user$project$Types_Station$get(_p52)),
								_1: {ctor: '[]'}
							});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$Main$LoggingIn(
										_elm_lang$core$Native_Utils.update(
											_p53,
											{failed: true}))
								}),
							{ctor: '[]'});
					}
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'GotStations':
				var _p54 = model.state;
				if (_p54.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p55 = _p33._0;
					if (_p55.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$Main$Playing(
										_elm_lang$core$Native_Utils.update(
											_p54._0,
											{stations: _p55._0}))
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{getStationError: true}),
							{ctor: '[]'});
					}
				}
			case 'StartStation':
				var _p58 = _p33._0;
				var _p56 = model.state;
				if (_p56.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p57 = _p56._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p57,
										{
											currentStation: _elm_lang$core$Maybe$Just(
												{id: _p58, name: _p33._1, art: _p33._2}),
											songQueue: {ctor: '[]'},
											playingState: _user$project$Main$Normal
										}))
							}),
						{
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$StartedStation,
								A3(_user$project$Types_Fragment$getNext, _p58, _p57.authToken, true)),
							_1: {ctor: '[]'}
						});
				}
			case 'LoadNextSongs':
				var _p59 = model.state;
				if (_p59.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$LoadedNextSongs,
								A3(_user$project$Types_Fragment$getNext, _p33._0, _p59._0.authToken, false)),
							_1: {ctor: '[]'}
						});
				}
			case 'StartedStation':
				var _p60 = model.state;
				if (_p60.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p62 = _p60._0;
					var _p61 = _p33._0;
					if (_p61.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$Main$Playing(
										_elm_lang$core$Native_Utils.update(
											_p62,
											{
												songQueue: A2(_elm_lang$core$List$append, _p62.songQueue, _p61._0),
												currentTime: 0,
												isPlaying: true
											}))
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{startStationError: true}),
							{ctor: '[]'});
					}
				}
			case 'LoadedNextSongs':
				var _p63 = model.state;
				if (_p63.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p65 = _p63._0;
					var _p64 = _p33._0;
					if (_p64.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									state: _user$project$Main$Playing(
										_elm_lang$core$Native_Utils.update(
											_p65,
											{
												songQueue: A2(_elm_lang$core$List$append, _p65.songQueue, _p64._0)
											}))
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{loadingSongError: true}),
							{ctor: '[]'});
					}
				}
			case 'SongEnded':
				var _p66 = model.state;
				if (_p66.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p67 = _p66._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p67,
										{
											songQueue: A2(_elm_lang$core$List$drop, 1, _p67.songQueue),
											previousSongs: {
												ctor: '::',
												_0: _user$project$Main$currentSong(model),
												_1: _p67.previousSongs
											},
											currentTime: 0,
											isPlaying: true
										}))
							}),
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(_p67.songQueue),
								2) ? A2(
								_elm_lang$http$Http$send,
								_user$project$Main$LoadedNextSongs,
								A3(_user$project$Types_Fragment$getNext, _p33._0, _p67.authToken, false)) : _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						});
				}
			case 'SkipSong':
				var _p68 = model.state;
				if (_p68.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p69 = _p68._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p69,
										{
											songQueue: A2(_elm_lang$core$List$drop, 1, _p69.songQueue),
											previousSongs: {
												ctor: '::',
												_0: _user$project$Main$currentSong(model),
												_1: _p69.previousSongs
											},
											currentTime: 0,
											isPlaying: true
										}))
							}),
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(
								_elm_lang$core$List$length(_p69.songQueue),
								2) ? A2(
								_elm_lang$http$Http$send,
								_user$project$Main$LoadedNextSongs,
								A3(_user$project$Types_Fragment$getNext, _p33._0, _p69.authToken, false)) : _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						});
				}
			case 'SetCurrentTime':
				var _p70 = model.state;
				if (_p70.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p71 = _p70._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p71,
										{currentTime: _p71.currentTime + 1}))
							}),
						{ctor: '[]'});
				}
			case 'TogglePause':
				var _p72 = model.state;
				if (_p72.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p73 = _p72._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p73,
										{isPlaying: !_p73.isPlaying}))
							}),
						{
							ctor: '::',
							_0: _user$project$Main$togglePause(
								{ctor: '_Tuple0'}),
							_1: {ctor: '[]'}
						});
				}
			case 'ReplaySong':
				var _p74 = model.state;
				if (_p74.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p74._0,
										{currentTime: 0, isPlaying: true}))
							}),
						{
							ctor: '::',
							_0: _user$project$Main$replaySong(
								{ctor: '_Tuple0'}),
							_1: {ctor: '[]'}
						});
				}
			case 'SendThumbsDown':
				var _p75 = model.state;
				if (_p75.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p76 = _p75._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p76,
										{
											songQueue: A2(_elm_lang$core$List$drop, 1, _p76.songQueue),
											previousSongs: {
												ctor: '::',
												_0: _user$project$Main$currentSong(model),
												_1: _p76.previousSongs
											},
											currentTime: 0,
											isPlaying: true
										}))
							}),
						{
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$SentFeedBack,
								A3(
									_user$project$Types_Feedback$send,
									_p76.authToken,
									_user$project$Main$currentSong(model).trackToken,
									false)),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.eq(
									_elm_lang$core$List$length(_p76.songQueue),
									2) ? A2(
									_elm_lang$http$Http$send,
									_user$project$Main$LoadedNextSongs,
									A3(_user$project$Types_Fragment$getNext, _p33._0, _p76.authToken, false)) : _elm_lang$core$Platform_Cmd$none,
								_1: {ctor: '[]'}
							}
						});
				}
			case 'RemoveThumbsUp':
				var _p77 = model.state;
				if (_p77.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p81 = _p77._0;
					var song = _elm_lang$core$List$head(_p81.songQueue);
					var updatedSong = function () {
						var _p78 = song;
						if (_p78.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(
								_elm_lang$core$Native_Utils.update(
									_p78._0,
									{rating: 0}));
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}();
					var updatedModel = _elm_lang$core$Native_Utils.update(
						model,
						{
							state: _user$project$Main$Playing(
								_elm_lang$core$Native_Utils.update(
									_p81,
									{
										songQueue: function () {
											var _p79 = updatedSong;
											if (_p79.ctor === 'Just') {
												return {
													ctor: '::',
													_0: _p79._0,
													_1: A2(_elm_lang$core$List$drop, 1, _p81.songQueue)
												};
											} else {
												return _p81.songQueue;
											}
										}()
									}))
						});
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						updatedModel,
						{
							ctor: '::',
							_0: function () {
								var _p80 = _elm_lang$core$List$head(_p81.songQueue);
								if (_p80.ctor === 'Just') {
									return A2(
										_elm_lang$http$Http$send,
										_user$project$Main$RemovedFeedBack,
										A2(_user$project$Types_Feedback$remove, _p81.authToken, _p80._0.trackToken));
								} else {
									return _elm_lang$core$Platform_Cmd$none;
								}
							}(),
							_1: {ctor: '[]'}
						});
				}
			case 'SendThumbsUp':
				var _p82 = model.state;
				if (_p82.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p86 = _p82._0;
					var song = _elm_lang$core$List$head(_p86.songQueue);
					var updatedSong = function () {
						var _p83 = song;
						if (_p83.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(
								_elm_lang$core$Native_Utils.update(
									_p83._0,
									{rating: 1}));
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}();
					var updatedModel = _elm_lang$core$Native_Utils.update(
						model,
						{
							state: _user$project$Main$Playing(
								_elm_lang$core$Native_Utils.update(
									_p86,
									{
										songQueue: function () {
											var _p84 = updatedSong;
											if (_p84.ctor === 'Just') {
												return {
													ctor: '::',
													_0: _p84._0,
													_1: A2(_elm_lang$core$List$drop, 1, _p86.songQueue)
												};
											} else {
												return _p86.songQueue;
											}
										}()
									}))
						});
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						updatedModel,
						{
							ctor: '::',
							_0: function () {
								var _p85 = _elm_lang$core$List$head(_p86.songQueue);
								if (_p85.ctor === 'Just') {
									return A2(
										_elm_lang$http$Http$send,
										_user$project$Main$SentFeedBack,
										A3(_user$project$Types_Feedback$send, _p86.authToken, _p85._0.trackToken, true));
								} else {
									return _elm_lang$core$Platform_Cmd$none;
								}
							}(),
							_1: {ctor: '[]'}
						});
				}
			case 'RemovedFeedBack':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'SentFeedBack':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'SetAudio':
				var _p88 = _p33._0;
				var _p87 = model.state;
				if (_p87.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p87._0,
										{audioLevel: _p88}))
							}),
						{
							ctor: '::',
							_0: _user$project$Main$audioLevel(_p88),
							_1: {ctor: '[]'}
						});
				}
			case 'HoveringAudio':
				var _p89 = model.state;
				if (_p89.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p89._0,
										{audioHover: true}))
							}),
						{ctor: '[]'});
				}
			case 'UnHoveringAudio':
				var _p90 = model.state;
				if (_p90.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p90._0,
										{audioHover: false}))
							}),
						{ctor: '[]'});
				}
			case 'ToStations':
				var _p91 = model.state;
				if (_p91.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{getStationError: false, loadingSongError: false, startStationError: false}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p91._0,
										{playingState: _user$project$Main$SelectingPlaying})),
								getStationError: false,
								loadingSongError: false,
								startStationError: false
							}),
						{ctor: '[]'});
				}
			case 'Mdl':
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p33._0, model);
			case 'NoOp':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'ToPlaying':
				var _p92 = model.state;
				if (_p92.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{getStationError: false, loadingSongError: false, startStationError: false}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p92._0,
										{playingState: _user$project$Main$Normal})),
								getStationError: false,
								loadingSongError: false,
								startStationError: false
							}),
						{ctor: '[]'});
				}
			case 'Mute':
				var _p93 = model.state;
				if (_p93.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p93._0,
										{audioLevel: 0}))
							}),
						{
							ctor: '::',
							_0: _user$project$Main$audioLevel(0),
							_1: {ctor: '[]'}
						});
				}
			case 'UnMute':
				var _p94 = model.state;
				if (_p94.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p94._0,
										{audioLevel: 1}))
							}),
						{
							ctor: '::',
							_0: _user$project$Main$audioLevel(1),
							_1: {ctor: '[]'}
						});
				}
			case 'Logout':
				var _p95 = model.state;
				if (_p95.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$LoggingIn(
									{
										email: '',
										password: '',
										remember: false,
										failed: false,
										audioLevel: _p95._0.audioLevel,
										username: _elm_lang$core$Maybe$Nothing,
										newUser: _elm_lang$core$Maybe$Just(true)
									})
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$LoggingIn(
									{
										email: '',
										password: '',
										remember: false,
										failed: false,
										audioLevel: _elm_lang$core$Maybe$Just(_p95._0.audioLevel),
										username: _elm_lang$core$Maybe$Nothing,
										newUser: _elm_lang$core$Maybe$Just(true)
									})
							}),
						{ctor: '[]'});
				}
			case 'RememberMe':
				var _p96 = model.state;
				if (_p96.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$LoggingIn(
									_elm_lang$core$Native_Utils.update(
										_p96._0,
										{remember: _p33._0}))
							}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'SetSeekLocation':
				var _p97 = model.state;
				if (_p97.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p97._0,
										{seek: _p33._0}))
							}),
						{
							ctor: '::',
							_0: _user$project$Main$getProgressBarWidth(
								{ctor: '_Tuple0'}),
							_1: {ctor: '[]'}
						});
				}
			case 'SetNewTime':
				var _p98 = model.state;
				if (_p98.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p99 = _p98._0;
					var newTime = (_p99.seek / _p33._0) * _elm_lang$core$Basics$toFloat(
						_user$project$Main$currentSong(model).trackLength);
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p99,
										{currentTime: newTime}))
							}),
						{
							ctor: '::',
							_0: _user$project$Main$sendNewTime(newTime),
							_1: {ctor: '[]'}
						});
				}
			case 'ToPreviousSongs':
				var _p100 = model.state;
				if (_p100.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p100._0,
										{playingState: _user$project$Main$PreviousSongs}))
							}),
						{ctor: '[]'});
				}
			case 'ToChat':
				var _p101 = model.state;
				if (_p101.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p102 = _p101._0;
					return _elm_lang$core$Native_Utils.eq(
						A2(_elm_lang$core$Debug$log, 'bool', _p102.newUser),
						false) ? A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p102,
										{
											playingState: _user$project$Main$Chatting(
												{
													email: _p102.email,
													chatInput: '',
													chats: {ctor: '[]'},
													username: _p102.username,
													newUser: false,
													userNameInput: ''
												})
										}))
							}),
						{
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$GotChats,
								_user$project$Types_Chat$getAll(_p102.authToken)),
							_1: {
								ctor: '::',
								_0: _user$project$Main$rememberUsername(_p102.username),
								_1: {
									ctor: '::',
									_0: _user$project$Main$newUser(
										{ctor: '_Tuple0'}),
									_1: {ctor: '[]'}
								}
							}
						}) : A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p102,
										{
											playingState: _user$project$Main$Chatting(
												{
													email: _p102.email,
													chatInput: '',
													chats: {ctor: '[]'},
													username: '',
													newUser: true,
													userNameInput: ''
												})
										}))
							}),
						{
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$GotChats,
								_user$project$Types_Chat$getAll(_p102.authToken)),
							_1: {ctor: '[]'}
						});
				}
			case 'PlayPreviousSong':
				var _p105 = _p33._0;
				var _p103 = model.state;
				if (_p103.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p104 = _p103._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p104,
										{
											songQueue: {ctor: '::', _0: _p105, _1: _p104.songQueue},
											currentTime: 0,
											isPlaying: true,
											previousSongs: A2(
												_elm_lang$core$List$filter,
												function (songTest) {
													return !_elm_lang$core$Native_Utils.eq(songTest.trackToken, _p105.trackToken);
												},
												_p104.previousSongs),
											playingState: _user$project$Main$Normal
										}))
							}),
						{ctor: '[]'});
				}
			case 'ChatInput':
				var _p106 = model.state;
				if (_p106.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p108 = _p106._0;
					var _p107 = _p108.playingState;
					switch (_p107.ctor) {
						case 'Normal':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingStation':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingPlaying':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'PreviousSongs':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						default:
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										state: _user$project$Main$Playing(
											_elm_lang$core$Native_Utils.update(
												_p108,
												{
													playingState: _user$project$Main$Chatting(
														_elm_lang$core$Native_Utils.update(
															_p107._0,
															{chatInput: _p33._0}))
												}))
									}),
								{ctor: '[]'});
					}
				}
			case 'GotChats':
				var _p109 = _p33._0;
				if (_p109.ctor === 'Ok') {
					var _p110 = model.state;
					if (_p110.ctor === 'LoggingIn') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					} else {
						var _p112 = _p110._0;
						var _p111 = _p112.playingState;
						switch (_p111.ctor) {
							case 'Normal':
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							case 'SelectingStation':
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							case 'SelectingPlaying':
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							case 'PreviousSongs':
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									model,
									{ctor: '[]'});
							default:
								return A2(
									_elm_lang$core$Platform_Cmd_ops['!'],
									_elm_lang$core$Native_Utils.update(
										model,
										{
											state: _user$project$Main$Playing(
												_elm_lang$core$Native_Utils.update(
													_p112,
													{
														playingState: _user$project$Main$Chatting(
															_elm_lang$core$Native_Utils.update(
																_p111._0,
																{chats: _p109._0}))
													}))
										}),
									{ctor: '[]'});
						}
					}
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'KeyDown':
				var _p116 = _p33._0;
				var _p113 = model.state;
				if (_p113.ctor === 'LoggingIn') {
					var _p114 = _p113._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						_elm_lang$core$Native_Utils.eq(_p116, 13) ? (_p114.remember ? {
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$LoggedInRemember,
								_user$project$Main$login(
									{email: _p114.email, password: _p114.password})),
							_1: {
								ctor: '::',
								_0: _user$project$Main$rememberEmail(_p114.email),
								_1: {
									ctor: '::',
									_0: _user$project$Main$rememberPassword(_p114.password),
									_1: {ctor: '[]'}
								}
							}
						} : {
							ctor: '::',
							_0: A2(
								_elm_lang$http$Http$send,
								_user$project$Main$LoggedIn,
								_user$project$Main$login(
									{email: _p114.email, password: _p114.password})),
							_1: {ctor: '[]'}
						}) : {
							ctor: '::',
							_0: _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						});
				} else {
					var _p115 = _p113._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.eq(_p116, 32) ? _elm_lang$core$Native_Utils.update(
							model,
							{
								keyPress: _p116,
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p115,
										{isPlaying: !_p115.isPlaying}))
							}) : _elm_lang$core$Native_Utils.update(
							model,
							{
								state: _user$project$Main$Playing(
									_elm_lang$core$Native_Utils.update(
										_p115,
										{isPlaying: _p115.isPlaying}))
							}),
						{
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.eq(_p116, 32) ? _user$project$Main$togglePause(
								{ctor: '_Tuple0'}) : _elm_lang$core$Platform_Cmd$none,
							_1: {ctor: '[]'}
						});
				}
			case 'UserNameInput':
				var _p117 = model.state;
				if (_p117.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p119 = _p117._0;
					var _p118 = _p119.playingState;
					switch (_p118.ctor) {
						case 'Normal':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingPlaying':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingStation':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'PreviousSongs':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						default:
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										state: _user$project$Main$Playing(
											_elm_lang$core$Native_Utils.update(
												_p119,
												{
													playingState: _user$project$Main$Chatting(
														_elm_lang$core$Native_Utils.update(
															_p118._0,
															{userNameInput: _p33._0}))
												}))
									}),
								{ctor: '[]'});
					}
				}
			case 'SetUserName':
				var _p120 = model.state;
				if (_p120.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p123 = _p120._0;
					var _p121 = _p123.playingState;
					switch (_p121.ctor) {
						case 'Normal':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingPlaying':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingStation':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'PreviousSongs':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						default:
							var _p122 = _p121._0;
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										state: _user$project$Main$Playing(
											_elm_lang$core$Native_Utils.update(
												_p123,
												{
													playingState: _user$project$Main$Chatting(
														_elm_lang$core$Native_Utils.update(
															_p122,
															{username: _p122.userNameInput, newUser: false}))
												}))
									}),
								{
									ctor: '::',
									_0: _user$project$Main$rememberUsername(_p122.userNameInput),
									_1: {
										ctor: '::',
										_0: _user$project$Main$newUser(
											{ctor: '_Tuple0'}),
										_1: {ctor: '[]'}
									}
								});
					}
				}
			case 'SendChat':
				var _p124 = model.state;
				if (_p124.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p127 = _p124._0;
					var _p125 = A2(_elm_lang$core$Debug$log, 'state', _p127.playingState);
					switch (_p125.ctor) {
						case 'Normal':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingPlaying':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingStation':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'PreviousSongs':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						default:
							var _p126 = _p125._0;
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										state: _user$project$Main$Playing(
											_elm_lang$core$Native_Utils.update(
												_p127,
												{
													playingState: _user$project$Main$Chatting(
														_elm_lang$core$Native_Utils.update(
															_p126,
															{chatInput: ''}))
												}))
									}),
								{
									ctor: '::',
									_0: A2(
										_elm_lang$http$Http$send,
										_user$project$Main$SentChat,
										_user$project$Types_Chat$send(
											{
												email: A2(_elm_lang$core$Debug$log, 'email', _p126.email),
												username: _p127.username,
												content: _p126.chatInput
											})),
									_1: {ctor: '[]'}
								});
					}
				}
			case 'SentChat':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'ChatSocket':
				var _p128 = model.state;
				if (_p128.ctor === 'LoggingIn') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					var _p131 = _p128._0;
					var _p129 = _p131.playingState;
					switch (_p129.ctor) {
						case 'Normal':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingPlaying':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'SelectingStation':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						case 'PreviousSongs':
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						default:
							var _p130 = _p129._0;
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										state: _user$project$Main$Playing(
											_elm_lang$core$Native_Utils.update(
												_p131,
												{
													playingState: _user$project$Main$Chatting(
														_elm_lang$core$Native_Utils.update(
															_p130,
															{
																chats: {ctor: '::', _0: _p33._0, _1: _p130.chats}
															}))
												}))
									}),
								{ctor: '[]'});
					}
				}
			default:
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
var _user$project$Main$RememberMe = function (a) {
	return {ctor: 'RememberMe', _0: a};
};
var _user$project$Main$LoginRemember = {ctor: 'LoginRemember'};
var _user$project$Main$Logout = {ctor: 'Logout'};
var _user$project$Main$viewTopMenu = F4(
	function (modelMdl, playingState, previousSongs, songQueue) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'margin-left', _1: 'auto'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: '-webkit-user-select', _1: 'none'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: function () {
					var onSelect = _debois$elm_mdl$Material_Menu$onSelect;
					var i = function (name) {
						return A2(
							_debois$elm_mdl$Material_Icon$view,
							name,
							{
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'width', '30px'),
								_1: {
									ctor: '::',
									_0: A2(_debois$elm_mdl$Material_Options$css, 'padding-right', '20px'),
									_1: {ctor: '[]'}
								}
							});
					};
					return A5(
						_debois$elm_mdl$Material_Menu$render,
						_user$project$Main$Mdl,
						{
							ctor: '::',
							_0: 2,
							_1: {ctor: '[]'}
						},
						modelMdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Menu$bottomRight,
							_1: {
								ctor: '::',
								_0: _debois$elm_mdl$Material_Menu$icon('keyboard_arrow_down'),
								_1: {ctor: '[]'}
							}
						},
						function () {
							var _p132 = playingState;
							switch (_p132.ctor) {
								case 'Normal':
									return {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Menu$item,
											{
												ctor: '::',
												_0: onSelect(_user$project$Main$ToStations),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: i('apps'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text('Stations'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Menu$item,
												{
													ctor: '::',
													_0: onSelect(_user$project$Main$ToChat),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: i('chat_bubble'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text('Chat'),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Menu$item,
													{
														ctor: '::',
														_0: onSelect(_user$project$Main$ToPreviousSongs),
														_1: {
															ctor: '::',
															_0: _elm_lang$core$Native_Utils.eq(
																previousSongs,
																{ctor: '[]'}) ? _debois$elm_mdl$Material_Menu$disabled : _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Menu$divider,
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: i('first_page'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text('Previous Songs'),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Menu$item,
														{
															ctor: '::',
															_0: onSelect(_user$project$Main$Logout),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: i('clear'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text('Log out'),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									};
								case 'SelectingPlaying':
									return {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Menu$item,
											{
												ctor: '::',
												_0: onSelect(_user$project$Main$ToPlaying),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: i('play_circle_outline'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text('Player'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Menu$item,
												{
													ctor: '::',
													_0: onSelect(_user$project$Main$ToChat),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: i('chat_bubble'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text('Chat'),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Menu$item,
													{
														ctor: '::',
														_0: onSelect(_user$project$Main$ToPreviousSongs),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Menu$divider,
															_1: {
																ctor: '::',
																_0: _elm_lang$core$Native_Utils.eq(
																	previousSongs,
																	{ctor: '[]'}) ? _debois$elm_mdl$Material_Menu$disabled : _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: i('first_page'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text('Previous Songs'),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Menu$item,
														{
															ctor: '::',
															_0: onSelect(_user$project$Main$Logout),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: i('clear'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text('Log out'),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									};
								case 'SelectingStation':
									return {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Menu$item,
											{
												ctor: '::',
												_0: onSelect(_user$project$Main$ToPlaying),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Menu$disabled,
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: i('play_circle_outline'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text('Player'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Menu$item,
												{
													ctor: '::',
													_0: onSelect(_user$project$Main$ToChat),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: i('chat_bubble'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text('Chat'),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Menu$item,
													{
														ctor: '::',
														_0: onSelect(_user$project$Main$ToPreviousSongs),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Menu$disabled,
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Menu$divider,
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: i('first_page'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text('Previous Songs'),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Menu$item,
														{
															ctor: '::',
															_0: onSelect(_user$project$Main$Logout),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: i('clear'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text('Log out'),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									};
								case 'PreviousSongs':
									return {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Menu$item,
											{
												ctor: '::',
												_0: onSelect(_user$project$Main$ToPlaying),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
													_1: {ctor: '[]'}
												}
											},
											{
												ctor: '::',
												_0: i('play_circle_outline'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text('Player'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Menu$item,
												{
													ctor: '::',
													_0: onSelect(_user$project$Main$ToChat),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: i('chat_bubble'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text('Chat'),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Menu$item,
													{
														ctor: '::',
														_0: onSelect(_user$project$Main$ToStations),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
															_1: {ctor: '[]'}
														}
													},
													{
														ctor: '::',
														_0: i('apps'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text('Stations'),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Menu$item,
														{
															ctor: '::',
															_0: onSelect(_user$project$Main$Logout),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: i('clear'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text('Log out'),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									};
								default:
									return {
										ctor: '::',
										_0: A2(
											_debois$elm_mdl$Material_Menu$item,
											function () {
												var _p133 = songQueue;
												if (_p133.ctor === '[]') {
													return {
														ctor: '::',
														_0: onSelect(_user$project$Main$NoOp),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Menu$disabled,
															_1: {ctor: '[]'}
														}
													};
												} else {
													return {
														ctor: '::',
														_0: onSelect(_user$project$Main$ToPlaying),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
															_1: {ctor: '[]'}
														}
													};
												}
											}(),
											{
												ctor: '::',
												_0: i('play_circle_outline'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html$text('Player'),
													_1: {ctor: '[]'}
												}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_debois$elm_mdl$Material_Menu$item,
												{
													ctor: '::',
													_0: onSelect(_user$project$Main$ToStations),
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
														_1: {ctor: '[]'}
													}
												},
												{
													ctor: '::',
													_0: i('apps'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html$text('Stations'),
														_1: {ctor: '[]'}
													}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_debois$elm_mdl$Material_Menu$item,
													{
														ctor: '::',
														_0: onSelect(_user$project$Main$ToPreviousSongs),
														_1: {
															ctor: '::',
															_0: _debois$elm_mdl$Material_Menu$disabled,
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Menu$divider,
																_1: {ctor: '[]'}
															}
														}
													},
													{
														ctor: '::',
														_0: i('first_page'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html$text('Previous Songs'),
															_1: {ctor: '[]'}
														}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_debois$elm_mdl$Material_Menu$item,
														{
															ctor: '::',
															_0: onSelect(_user$project$Main$Logout),
															_1: {
																ctor: '::',
																_0: _debois$elm_mdl$Material_Options$cs('topMenuIcon'),
																_1: {ctor: '[]'}
															}
														},
														{
															ctor: '::',
															_0: i('clear'),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html$text('Log out'),
																_1: {ctor: '[]'}
															}
														}),
													_1: {ctor: '[]'}
												}
											}
										}
									};
							}
						}());
				}(),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Main$viewTopBar = F7(
	function (modelAudioLevel, modelCurrentStationName, modelAudioHover, modelMdl, playingState, modelPreviousSongs, songQueue) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'height', _1: '10%'},
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'left', _1: '0'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'right', _1: '0'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '6px'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(modelCurrentStationName),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A3(_user$project$Main$audioSelector, modelAudioLevel, modelAudioHover, modelPreviousSongs),
							_1: {
								ctor: '::',
								_0: A4(_user$project$Main$viewTopMenu, modelMdl, playingState, modelPreviousSongs, songQueue),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Main$viewPlayer = F9(
	function (model, content, audioLevel, currentStation, audioHover, mdl, playingState, previousSongs, songQueue) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'flex-direction', _1: 'column'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A7(
					_user$project$Main$viewTopBar,
					audioLevel,
					function () {
						var _p134 = currentStation;
						if (_p134.ctor === 'Just') {
							return _p134._0.name;
						} else {
							return '';
						}
					}(),
					audioHover,
					mdl,
					playingState,
					previousSongs,
					songQueue),
				_1: {
					ctor: '::',
					_0: content,
					_1: {
						ctor: '::',
						_0: A2(
							_user$project$Main$viewControls,
							model,
							_user$project$Main$getCurrentStation(model).id),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$Main$Login = {ctor: 'Login'};
var _user$project$Main$InputPassword = function (a) {
	return {ctor: 'InputPassword', _0: a};
};
var _user$project$Main$InputEmail = function (a) {
	return {ctor: 'InputEmail', _0: a};
};
var _user$project$Main$viewLogin = F3(
	function (model, remember, failed) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'flex-direction', _1: 'column'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '650px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '10px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '30px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '30px'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$h3,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '0'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Log in'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '30px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '25px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '450px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'align-self', _1: 'center'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'height', _1: '35px'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('email'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('Email'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$InputEmail),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('password'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder('Password'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$InputPassword),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '450px'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'align-self', _1: 'center'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'height', _1: '35px'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '30px'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '10%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'height', _1: '40px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '460px'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'align-self', _1: 'center'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '10px'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin-right', _1: 'auto'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '10px'},
																_1: {ctor: '[]'}
															}
														}
													}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$p,
												{ctor: '[]'},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Remember me'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_elm_lang$html$Html$input,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onCheck(_user$project$Main$RememberMe),
															_1: {
																ctor: '::',
																_0: _elm_lang$html$Html_Attributes$style(
																	{
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '7px'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'margin-left', _1: '5px'},
																			_1: {ctor: '[]'}
																		}
																	}),
																_1: {ctor: '[]'}
															}
														}
													},
													{ctor: '[]'}),
												_1: {ctor: '[]'}
											}
										}),
									_1: {
										ctor: '::',
										_0: A5(
											_debois$elm_mdl$Material_Button$render,
											_user$project$Main$Mdl,
											{
												ctor: '::',
												_0: 102321,
												_1: {ctor: '[]'}
											},
											model.mdl,
											{
												ctor: '::',
												_0: remember ? _debois$elm_mdl$Material_Options$onClick(_user$project$Main$LoginRemember) : _debois$elm_mdl$Material_Options$onClick(_user$project$Main$Login),
												_1: {
													ctor: '::',
													_0: _debois$elm_mdl$Material_Button$raised,
													_1: {
														ctor: '::',
														_0: _debois$elm_mdl$Material_Button$ripple,
														_1: {
															ctor: '::',
															_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-right', '10px'),
															_1: {
																ctor: '::',
																_0: A2(_debois$elm_mdl$Material_Options$css, 'margin-left', 'auto'),
																_1: {ctor: '[]'}
															}
														}
													}
												}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Log in'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: {
								ctor: '::',
								_0: failed ? A2(
									_elm_lang$html$Html$p,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'text-align', _1: 'center'},
													_1: {ctor: '[]'}
												}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Invalid username or password'),
										_1: {ctor: '[]'}
									}) : _elm_lang$html$Html$text(''),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _user$project$Main$view = function (model) {
	var _p135 = model.state;
	if (_p135.ctor === 'Playing') {
		var _p140 = _p135._0;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'height', _1: '100%'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$audio,
					{
						ctor: '::',
						_0: _user$project$Main$onEnded(
							function () {
								var _p136 = _p140.currentStation;
								if (_p136.ctor === 'Just') {
									return _p136._0.id;
								} else {
									return '';
								}
							}()),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('songAudio'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$src(
									function () {
										var _p138 = _elm_lang$core$List$head(
											function () {
												var _p137 = model.state;
												if (_p137.ctor === 'Playing') {
													return _p137._0.songQueue;
												} else {
													return {ctor: '[]'};
												}
											}());
										if (_p138.ctor === 'Just') {
											return _p138._0.audioURL;
										} else {
											return '';
										}
									}()),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$autoplay(true),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A9(
						_user$project$Main$viewPlayer,
						model,
						function () {
							var _p139 = _p140.playingState;
							switch (_p139.ctor) {
								case 'Normal':
									return _user$project$Main$viewSongInfo(model);
								case 'SelectingPlaying':
									return A2(_user$project$Main$viewStationSelector, model, _p140.stations);
								case 'SelectingStation':
									return A2(_user$project$Main$viewStationSelector, model, _p140.stations);
								case 'PreviousSongs':
									return _user$project$Main$viewPreviousSongs(model);
								default:
									return _user$project$Main$viewChatWindow(model);
							}
						}(),
						_p140.audioLevel,
						_p140.currentStation,
						_p140.audioHover,
						model.mdl,
						_p140.playingState,
						_p140.previousSongs,
						_p140.songQueue),
					_1: {ctor: '[]'}
				}
			});
	} else {
		var _p141 = _p135._0;
		return A3(_user$project$Main$viewLogin, model, _p141.remember, _p141.failed);
	}
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (audioLevel) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (email) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (newUser) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (password) {
									return A2(
										_elm_lang$core$Json_Decode$andThen,
										function (username) {
											return _elm_lang$core$Json_Decode$succeed(
												{audioLevel: audioLevel, email: email, newUser: newUser, password: password, username: username});
										},
										A2(
											_elm_lang$core$Json_Decode$field,
											'username',
											_elm_lang$core$Json_Decode$oneOf(
												{
													ctor: '::',
													_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
													_1: {
														ctor: '::',
														_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
														_1: {ctor: '[]'}
													}
												})));
								},
								A2(
									_elm_lang$core$Json_Decode$field,
									'password',
									_elm_lang$core$Json_Decode$oneOf(
										{
											ctor: '::',
											_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
												_1: {ctor: '[]'}
											}
										})));
						},
						A2(
							_elm_lang$core$Json_Decode$field,
							'newUser',
							_elm_lang$core$Json_Decode$oneOf(
								{
									ctor: '::',
									_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
									_1: {
										ctor: '::',
										_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
										_1: {ctor: '[]'}
									}
								})));
				},
				A2(
					_elm_lang$core$Json_Decode$field,
					'email',
					_elm_lang$core$Json_Decode$oneOf(
						{
							ctor: '::',
							_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
							_1: {
								ctor: '::',
								_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string),
								_1: {ctor: '[]'}
							}
						})));
		},
		A2(
			_elm_lang$core$Json_Decode$field,
			'audioLevel',
			_elm_lang$core$Json_Decode$oneOf(
				{
					ctor: '::',
					_0: _elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$float),
						_1: {ctor: '[]'}
					}
				}))));
